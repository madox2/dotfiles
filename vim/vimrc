"============= PLUGINS =============
call plug#begin('~/.vim/plugged')
Plug 'bronson/vim-trailing-whitespace' "remove trailing whitespaces
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/vim-nerdtree_plugin_open' "open files by default app
Plug 'pangloss/vim-javascript' "javascript syntax
Plug 'maxmellon/vim-jsx-pretty'
Plug 'alvan/vim-closetag' "auto close xml tag
Plug 'jiangmiao/auto-pairs' "auto brackets, quotes, ...
Plug 'mileszs/ack.vim' "find in files
Plug 'kshenoy/vim-signature' "show marks
Plug 'bling/vim-airline' "theme
Plug 'Valloric/YouCompleteMe', { 'dir': '~/.vim/plugged/YouCompleteMe', 'do': 'python3 install.py --all' }
Plug 'tpope/vim-fugitive' "git plugin
Plug 'rbong/vim-flog' "git log as tree
Plug 'elzr/vim-json' "json highlighting, no-js warnings
Plug 'tpope/vim-surround' "change brackets, quotes quickly
Plug 'scrooloose/nerdcommenter' "comment utility
Plug 'tpope/vim-repeat' "improved dot command
Plug 'tpope/vim-unimpaired' "moving through lists
Plug 'Galooshi/vim-import-js' "import utility for js: npm install -g import-js
Plug 'christoomey/vim-tmux-navigator' "seamles tmux-vim navigation ctrl+hjkl
Plug 'godlygeek/tabular' "tabular indentation utils
Plug 'w0rp/ale' "linting, auto fixing engine
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim' "typescript code highlighting
Plug 'ianks/vim-tsx' "support jsx in tsx
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jparise/vim-graphql' "syntax highlighting for graphql
Plug 'vim-test/vim-test'
Plug 'davidhalter/jedi-vim'
Plug 'jenterkin/vim-autosource'
Plug 'madox2/vim-ai'
"Plug '/home/m/Repos/vim-ai'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'posva/vim-vue'
call plug#end()

"use with vim 8.2 and higher
"fzf syntax highlighting: apt install bat (https://github.com/sharkdp/bat)

"============= PREFERENCES =============
set clipboard^=unnamed,unnamedplus
set hls
set incsearch
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab
set nu
set swapfile
set backupcopy=yes
set dir=/tmp
set shortmess+=A
set hidden
set autoread
set diffopt+=vertical " see diffs in vertical split panes (fugitive)
set termwinscroll=100000 " max n.o. lines in terminal

filetype plugin indent on
syntax enable
let g:nerdtree_plugin_open_cmd = 'xdg-open'
let g:javascript_plugin_jsdoc = 1
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.js,*.jsx,*.tsx,*.php"
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_auto_hover='' " disable auto hover YCMHover
let g:jedi#popup_select_first = 0
set completeopt-=preview "ycm: disable preview in hsplit
let NERDTreeAutoDeleteBuffer = 1
let g:vim_jsx_pretty_colorful_config = 1
let g:vim_markdown_folding_disabled = 1
" make test commands execute using Vim8 terminal
let test#strategy = "vimterminal"
let g:autosource_conf_names = '.vimrc_local'
let g:flog_use_internal_lua = 1
let g:vim_ai_roles_path = '/home/m/.vim/vim_ai/roles.yaml'

autocmd BufNewFile,BufRead *.md set syntax=markdown
autocmd BufNewFile,BufRead .prettierrc set syntax=json
autocmd BufNewFile,BufRead .eslintrc set syntax=json
autocmd BufNewFile,BufRead Jenkinsfile* set syntax=groovy
" close vim if the only window left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" don't search filenames with Ag command
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:40%'), <bang>0)
" search knowladge base with preview
command! -bang -nargs=* KB call fzf#vim#ag(<q-args>, fzf#vim#with_preview({'dir': '~/Dropbox/DEV/kb/'}, 'up:40%'), <bang>0)
" customized files with preview window
command! -bang -nargs=* Files call fzf#vim#files(<q-args>, fzf#vim#with_preview('up:40%'), <bang>0)
" customized buffers with preview window
command! -bang -nargs=* Buffers call fzf#vim#buffers(<q-args>, fzf#vim#with_preview('up:40%'), <bang>0)
" prevent clearing clipboard after closing (https://stackoverflow.com/a/9381778/741871)
autocmd VimLeave * call system("xsel -ib", getreg('+'))


"============= BINDINGS/COMMANDS =============
nmap <Enter> :NERDTreeFind<CR>
nmap <Space> :Buffers<CR>
nmap <C-@> :Ag<CR>
nmap <C-N> :BLines<CR>
"fix `enter` in quickfix list
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

"imporved default fzf command to exclude ignore files
"https://github.com/junegunn/fzf.vim/issues/121
let $FZF_DEFAULT_COMMAND = 'ag --hidden -g ""'
nmap <C-p> <Esc>:Files<CR>

" knowladge base shortcut
nnoremap <leader>kb :KB<CR>

nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>ts :TestSuite<CR>
nnoremap <leader>tl :TestLast<CR>

" vim-ai
xnoremap <leader>c :AIChat<CR>
nnoremap <leader>c :AIChat<CR>
nnoremap <leader>r :AIRedo<CR>

command! ALEDisableFixer let g:ale_fix_on_save=0
command! ALEEnableFixer let g:ale_fix_on_save=1

"============= THEME =============
" Use terminal themes from https://github.com/Mayccoll/Gogh
highlight colorcolumn ctermbg=0
set colorcolumn=80
set t_Co=256
set background=dark

"============= LINTING =============
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1
let g:ale_linters = {}
let g:ale_linters['javascript'] = ['eslint']
let g:ale_linters['json'] = ['eslint']
let g:ale_linters['python'] = ['flake8', 'mypy']
let g:ale_linters['typescript'] = ['tslint', 'tsserver', 'eslint']
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_fixers['typescript'] = ['prettier', 'eslint']
let g:ale_fixers['html'] = ['prettier']
let g:ale_fixers['python'] = ['black']
let g:ale_fixers['scss'] = ['prettier']
let g:ale_fixers['css'] = ['prettier']
let g:ale_fixers['less'] = ['prettier']
let g:ale_fixers['json'] = ['prettier', 'eslint']
let g:ale_fixers['yaml'] = ['prettier']
let g:ale_javascript_prettier_use_local_config = 1

function! ALEConfigDeno()
  let g:ale_linters['javascript'] = ['deno']
  let g:ale_linters['typescript'] = ['deno']
  let g:ale_fixers['javascript'] = ['deno']
  let g:ale_fixers['typescript'] = ['deno']
endfunction

" use eslint_d to speed up linting (requires global eslint_d to be installed)
let g:ale_javascript_eslint_use_global = 1
let g:ale_javascript_eslint_executable = 'eslint_d'
let g:ale_typescript_eslint_use_global = 1
let g:ale_typescript_eslint_executable = 'eslint_d'
" show ALEDetail in a floating window
let g:ale_floating_preview=1
let g:ale_floating_window_border = []
let g:ale_virtualtext_cursor = 'disabled'

"============= DIAGNOSTIC/COMPLETER =============
" tyypescript/javascript mappings
nnoremap <leader>gg :YcmCompleter GoTo<CR>
nnoremap <leader>gt :YcmCompleter GoToType<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <leader>f :YcmCompleter FixIt<CR>
" show diagnostic
nnoremap <leader>d :ALEDetail<CR>
" show symbol info (type)
"nnoremap <leader>t :ALEHover<CR>
nmap <leader>h <plug>(YCMHover)

"============= WORKAROUNDS =============

" hide diagnostic symbols in YCM (errors will be highlighted with ale)
" https://github.com/Valloric/YouCompleteMe/issues/1192#issuecomment-56555948
let g:ycm_show_diagnostics_ui = 1
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0

" Allow to open files in quicklist in fzf
" https://github.com/junegunn/fzf/blob/master/README-VIM.md#examples
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction
let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Proper closetag regions for typescript
let g:closetag_regions =  {
\ 'typescript.tsx': 'jsxRegion,tsxRegion',
\ 'javascript.jsx': 'jsxRegion',
\ }

" To enable javascript completer in JSX files (YCM)
" https://github.com/ycm-core/YouCompleteMe/issues/1841#issuecomment-165025815
autocmd BufEnter *.jsx set filetype=javascript
autocmd BufEnter .env.* set filetype=sh

" Eliminating esc delay (problems to close fzf window)
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
" https://github.com/junegunn/fzf/issues/1393#issuecomment-716585458
set ttimeoutlen=0

" Fix indentation bug in markdown files
" https://github.com/preservim/vim-markdown/issues/126#issuecomment-640890790
au filetype markdown set formatoptions+=ro
au filetype markdown set comments=b:*,b:-,b:+,b:1.
